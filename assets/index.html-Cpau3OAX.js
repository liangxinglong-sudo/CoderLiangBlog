import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as o,o as a}from"./app-CyOKwk5-.js";const p={};function r(i,e){return a(),n("div",null,e[0]||(e[0]=[o('<h1 id="《effective-java》读书笔记" tabindex="-1"><a class="header-anchor" href="#《effective-java》读书笔记"><span>《Effective Java》读书笔记</span></a></h1><h2 id="一、创建和销毁对象" tabindex="-1"><a class="header-anchor" href="#一、创建和销毁对象"><span>一、创建和销毁对象</span></a></h2><p>1.用静态工厂方法代替构造器</p><p>2.遇到多个构造器参数时要考虑使用构建器</p><p>3.用私有构造器或者枚举类型强化Singleton属性</p><p>4.通过私有构造器强化不可实例化的能力</p><p>5.优先考虑依赖注入来引用资源</p><p>6.避免创建不必要的对象</p><p>7.消除过期的对象引用</p><p>8.避免使用终结方法和清除方法</p><p>9.try-with-resources优先于try-finally</p>',11)]))}const s=t(p,[["render",r],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/storys/","title":"故事大全","lang":"zh-CN","frontmatter":{"title":"故事大全","icon":"object-group","category":["故事会"],"tag":["story"],"description":"《Effective Java》读书笔记 一、创建和销毁对象 1.用静态工厂方法代替构造器 2.遇到多个构造器参数时要考虑使用构建器 3.用私有构造器或者枚举类型强化Singleton属性 4.通过私有构造器强化不可实例化的能力 5.优先考虑依赖注入来引用资源 6.避免创建不必要的对象 7.消除过期的对象引用 8.避免使用终结方法和清除方法 9.try...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/storys/"}],["meta",{"property":"og:site_name","content":"CODER LIANG"}],["meta",{"property":"og:title","content":"故事大全"}],["meta",{"property":"og:description","content":"《Effective Java》读书笔记 一、创建和销毁对象 1.用静态工厂方法代替构造器 2.遇到多个构造器参数时要考虑使用构建器 3.用私有构造器或者枚举类型强化Singleton属性 4.通过私有构造器强化不可实例化的能力 5.优先考虑依赖注入来引用资源 6.避免创建不必要的对象 7.消除过期的对象引用 8.避免使用终结方法和清除方法 9.try..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-24T02:33:50.000Z"}],["meta",{"property":"article:tag","content":"story"}],["meta",{"property":"article:modified_time","content":"2025-01-24T02:33:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"故事大全\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-24T02:33:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Coder Liang\\",\\"url\\":\\"https://blog.csdn.net/Phone_1070333541?type=blog\\"}]}"]]},"headers":[{"level":2,"title":"一、创建和销毁对象","slug":"一、创建和销毁对象","link":"#一、创建和销毁对象","children":[]}],"git":{"createdTime":1725870917000,"updatedTime":1737686030000,"contributors":[{"name":"liangxinglong","username":"liangxinglong","email":"16630935153@163.com","commits":2,"url":"https://github.com/liangxinglong"}]},"readingTime":{"minutes":0.51,"words":153},"filePathRelative":"storys/README.md","localizedDate":"2024年9月9日","excerpt":"\\n<h2>一、创建和销毁对象</h2>\\n<p>1.用静态工厂方法代替构造器</p>\\n<p>2.遇到多个构造器参数时要考虑使用构建器</p>\\n<p>3.用私有构造器或者枚举类型强化Singleton属性</p>\\n<p>4.通过私有构造器强化不可实例化的能力</p>\\n<p>5.优先考虑依赖注入来引用资源</p>\\n<p>6.避免创建不必要的对象</p>\\n<p>7.消除过期的对象引用</p>\\n<p>8.避免使用终结方法和清除方法</p>\\n<p>9.try-with-resources优先于try-finally</p>\\n","autoDesc":true}');export{s as comp,m as data};

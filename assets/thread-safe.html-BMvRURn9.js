import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,d as t}from"./app-BrrEAuRv.js";const s={},a=t(`<h2 id="四、线程安全" tabindex="-1"><a class="header-anchor" href="#四、线程安全"><span>四、线程安全</span></a></h2><h3 id="synchronized-关键字" tabindex="-1"><a class="header-anchor" href="#synchronized-关键字"><span>synchronized 关键字</span></a></h3><p>在java中，每个对象都有一个对象锁与之相关联，该锁表明对象在任何时候只允许被一个线程所拥有，当一个线程调用对象的一段synchronized代码时，首先需要获取这个锁，然后去执行相应的代码，执行结束后，释放锁。</p><p>synchronized关键字主要用两种方法（synchronized方法和synchronzied块），此外该关键字还可以作用静态方法、类或某个实例，但这都对程序的效率有很大的影响。</p><p><strong>synchronized 方法</strong> ：在方法的声明前加入synchronized关键字。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> mutiThreadAccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>只要把多个线程访问的资源的操作放在mutiThreadAccess方法中，就能够保证这个方法在同一时刻只能被一个线程来访问，从而保证了多线程访问的安全性。然而，当一个方法的方法体规模非常大时，把该方法声明为synchronized会大大影响程序的执行效率。为了提高程序的执行效率，java语言提供了synchronized块。</p><p>**synchrnized 块：**可以把任意代码段声明为synchronized，也可以指定上锁的对象，有非常高的灵活性。用法如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(syncObject){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	//访问syncObject的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wait-与-notify" tabindex="-1"><a class="header-anchor" href="#wait-与-notify"><span>wait 与 notify</span></a></h3><p><strong>简介</strong></p><p>当时用synchronized 来修饰某个共享资源的时候，如果线程A1在执行synchronized代码时，另外一线程A2也要同时执行同一对象的同一synchronized代码时，线程A2将要等到线程A1执行完成后，才继续执行。在这种情况下，可以使用wait和notify方法。</p><p>在synchronized代码被执行期间，线程可以调用对象的wait方法，释放对象锁，进入等待状态，并可以调用notify方法或nofityAll方法方法通知正在等待的其他线程，notify方法仅唤醒一个线程（待队列中的第一个），并允许它去获取锁，而notifyAll方法唤醒所有等待这个对象的线程，并允许们去获取锁(并不是每个都获取到锁，而是让他们去竞争)。</p><p><strong>wait()和sleep()的区别？</strong></p><p>wait()进入阻塞状态，释放锁，要想离开阻塞状态，必须有人唤醒他，还得必须得到锁。</p><p><strong>生产者和消费者模型。</strong></p><h3 id="_3-lock" tabindex="-1"><a class="header-anchor" href="#_3-lock"><span>3.Lock</span></a></h3><p>JDK5新增加了Lock接口以及他的一个实现类ReentrantLock（重入锁），Lock也可以用来实现多线程同步，具体而言，它提供了如下的一些方法来实现多线程同步：</p><p><strong>lock()</strong> 以阻塞的方式获取锁，也就是说，如果获取到了锁就立即返回，如果其他线程持有锁，当前线程等待知道获取到了锁后返回。</p><p><strong>tryLock()</strong> 以非阻塞方式获取锁。只是尝试性的去获取锁，如果获取到了就返回true，否则，立即返回false。</p><p><strong>tryLock( Long timeout, TimeUnit unit)</strong> 如果获取了锁，立即返回ture；否则，会等待到给定的时间单元，在等待的过程中，如果获取了锁，返回true ，如果等待超时，则返回false。</p><p><strong>lockInterruptibly()</strong></p><p>如果获取了锁，则立即返回，如果没有获取锁，则当前线程处于休眠状态，直到获取了锁，或者当前程被其他线程中断（会收到InterruptedException异常）。它与lock()方法的最大区别如果lock()法获取不到锁，则会一直处于阻塞状态，且会忽略interrupt()方法。</p><h3 id="同步方法的同步监听对象是谁" tabindex="-1"><a class="header-anchor" href="#同步方法的同步监听对象是谁"><span>同步方法的同步监听对象是谁?</span></a></h3><ul><li>若同步方法是非static方法,此时同步监听对象是:this.</li><li>若同步方法是static方法,此时同步监听对象是:当前方法所在类的字节码对象.</li></ul>`,25),r=[a];function o(h,l){return n(),i("div",null,r)}const p=e(s,[["render",o],["__file","thread-safe.html.vue"]]),y=JSON.parse('{"path":"/con-program/thread-safe.html","title":"线程安全","lang":"zh-CN","frontmatter":{"title":"线程安全","icon":"shield","category":["线程"],"tag":["并发编程"],"description":"四、线程安全 synchronized 关键字 在java中，每个对象都有一个对象锁与之相关联，该锁表明对象在任何时候只允许被一个线程所拥有，当一个线程调用对象的一段synchronized代码时，首先需要获取这个锁，然后去执行相应的代码，执行结束后，释放锁。 synchronized关键字主要用两种方法（synchronized方法和synchron...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/con-program/thread-safe.html"}],["meta",{"property":"og:site_name","content":"CODER LIANG"}],["meta",{"property":"og:title","content":"线程安全"}],["meta",{"property":"og:description","content":"四、线程安全 synchronized 关键字 在java中，每个对象都有一个对象锁与之相关联，该锁表明对象在任何时候只允许被一个线程所拥有，当一个线程调用对象的一段synchronized代码时，首先需要获取这个锁，然后去执行相应的代码，执行结束后，释放锁。 synchronized关键字主要用两种方法（synchronized方法和synchron..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Coder Liang"}],["meta",{"property":"article:tag","content":"并发编程"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程安全\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Coder Liang\\",\\"url\\":\\"https://blog.csdn.net/Phone_1070333541?type=blog\\"}]}"]]},"headers":[{"level":2,"title":"四、线程安全","slug":"四、线程安全","link":"#四、线程安全","children":[{"level":3,"title":"synchronized 关键字","slug":"synchronized-关键字","link":"#synchronized-关键字","children":[]},{"level":3,"title":"wait 与 notify","slug":"wait-与-notify","link":"#wait-与-notify","children":[]},{"level":3,"title":"3.Lock","slug":"_3-lock","link":"#_3-lock","children":[]},{"level":3,"title":"同步方法的同步监听对象是谁?","slug":"同步方法的同步监听对象是谁","link":"#同步方法的同步监听对象是谁","children":[]}]}],"git":{},"readingTime":{"minutes":3.22,"words":965},"filePathRelative":"con-program/thread-safe.md","excerpt":"<h2>四、线程安全</h2>\\n<h3>synchronized 关键字</h3>\\n<p>在java中，每个对象都有一个对象锁与之相关联，该锁表明对象在任何时候只允许被一个线程所拥有，当一个线程调用对象的一段synchronized代码时，首先需要获取这个锁，然后去执行相应的代码，执行结束后，释放锁。</p>\\n<p>synchronized关键字主要用两种方法（synchronized方法和synchronzied块），此外该关键字还可以作用静态方法、类或某个实例，但这都对程序的效率有很大的影响。</p>\\n<p><strong>synchronized 方法</strong> ：在方法的声明前加入synchronized关键字。例如：</p>","autoDesc":true}');export{p as comp,y as data};
